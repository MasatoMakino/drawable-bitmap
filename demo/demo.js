(()=>{"use strict";class e{constructor(e){this.canvas=e,this.isDrawing=!1,this.onStroke=e=>{const n=this.points.get(e.pointerId);if(null==n)return;this.updateStrokeStyle();const i=this.canvas.getContext("2d");i.beginPath(),i.moveTo(n.x,n.y),i.lineTo(e.offsetX,e.offsetY),i.closePath(),i.stroke(),this.points.set(e.pointerId,new t(e.offsetX,e.offsetY))},this.onStartStroke=e=>{this.points.set(e.pointerId,new t(e.offsetX,e.offsetY))},this.onFinishStroke=e=>{this.points.delete(e.pointerId)},this.option=new r,this.points=new Map,this.clear()}clear(){const e=this.canvas.getContext("2d");e.clearRect(0,0,this.canvas.width,this.canvas.height),this.points.clear(),e.beginPath()}startDrawing(e){this.changeMode(e),this.isDrawing||(this.isDrawing=!0,this.canvas.addEventListener("pointerdown",this.onStartStroke),this.canvas.addEventListener("pointermove",this.onStroke),this.canvas.addEventListener("pointerup",this.onFinishStroke))}finishDrawing(){this.isDrawing&&(this.isDrawing=!1,this.canvas.removeEventListener("pointerdown",this.onStartStroke),this.canvas.removeEventListener("pointermove",this.onStroke),this.canvas.removeEventListener("pointerup",this.onFinishStroke))}changeMode(e){var t,n;const i=this.canvas.getContext("2d");this.option.mode=e.mode,this.option.color=null!==(t=e.color)&&void 0!==t?t:i.strokeStyle,this.option.width=null!==(n=e.width)&&void 0!==n?n:i.lineWidth,this.updateStrokeStyle()}updateStrokeStyle(){const e=this.canvas.getContext("2d");switch(this.option.mode){case n.pen:e.globalCompositeOperation="source-over";break;case n.eraser:e.globalCompositeOperation="destination-out"}e.strokeStyle=this.option.color,e.lineWidth=this.option.width,e.lineCap="round",e.lineJoin="round"}restoreImage(e,t="no-cors"){const n=new Request(e,{method:"GET",mode:t});fetch(n).then((e=>e.blob())).then((e=>{this.drawImage(e)}))}isImageType(e){switch(e.type){case"image/jpeg":case"image/png":return!0}return!1}drawImage(e){if(!this.isImageType(e))return;const t=this.canvas.getContext("2d");this.clear();const n=new Image;n.onload=()=>{t.drawImage(n,0,0)},n.src=URL.createObjectURL(e)}}class t{constructor(e=0,t=0){this.x=e,this.y=t}}var n,i=createjs.Bitmap,a=createjs.Shape;class s extends i{constructor(t,n){super(document.createElement("canvas")),this.redirectStartStroke=e=>{this.drawableCanvas.onStartStroke(s.convertToDrawingEvent(e))},this.redirectFinishStroke=e=>{this.drawableCanvas.onFinishStroke(s.convertToDrawingEvent(e))},this.redirectStroke=e=>{this.drawableCanvas.onStroke(s.convertToDrawingEvent(e))},this.canvas.width=t,this.canvas.height=n,this.drawableCanvas=new e(this.canvas),this.initHitArea()}startDisplayObjectDrawing(e){this.drawableCanvas.changeMode(e),this.isDrawing||(this.isDrawing=!0,this.addEventListener("mousedown",this.redirectStartStroke),this.addEventListener("pressmove",this.redirectStroke),this.addEventListener("pressup",this.redirectFinishStroke))}finishDisplayObjectDrawing(){this.isDrawing&&(this.isDrawing=!1,this.removeEventListener("mousedown",this.redirectStartStroke),this.removeEventListener("pressmove",this.redirectStroke),this.removeEventListener("pressup",this.redirectFinishStroke))}static convertToDrawingEvent(e){return{pointerId:e.pointerID,offsetX:e.localX,offsetY:e.localY}}initHitArea(){const e=new a;e.graphics.beginFill("#000").drawRect(-this.regX,-this.regY,this.canvas.width,this.canvas.height).endFill(),this.hitArea=e}get canvas(){return this.image}}!function(e){e.pen="pen",e.eraser="eraser"}(n||(n={}));class r{}let o,c;const h='input[name="mode"]',d='input[name="color"]',l='input[name="width"]',p=()=>{document.body.innerHTML='\n  <canvas id="appCanvas" width="640" height="480"></canvas>\n    <p>\n      mode:\n      <label><input type="radio" name="mode" value="pen" checked />pen</label>\n      <label><input type="radio" name="mode" value="eraser" />eraser</label>\n    </p>\n    <p>\n        color:\n        <label><input type="color" name="color" value="#ff00ff" /></label>\n    </p>\n    <p>\n        width:\n        <label><input type="number" name="width" min="1" max="20" value="8" /></label>\n    </p>\n    <p>\n        <input type="button" name="clearButton" value="Clear"/>\n    </p>',v();const e=document.getElementById("appCanvas");o=new createjs.Stage(e),o.enableMouseOver(),createjs.Touch.enable(o),createjs.Ticker.on("tick",(()=>{o.update()})),u(),g(),c.drawableCanvas.restoreImage("./img01.png")},v=()=>{document.querySelectorAll(h).forEach((e=>{e.onchange=e=>{c.drawableCanvas.startDrawing({mode:e.target.value})}})),document.querySelector(d).onchange=e=>{c.drawableCanvas.startDrawing({color:e.target.value})},document.querySelector(l).onchange=e=>{c.drawableCanvas.startDrawing({width:e.target.value})},document.querySelector('input[name="clearButton"]').onclick=e=>{c.drawableCanvas.clear()}},u=()=>{c=new s(640,480),o.addChild(c)},g=()=>{const e=document.querySelector(h+":checked").value,t=document.querySelector(d).value,n=document.querySelector(l).value;c.startDisplayObjectDrawing({mode:e,color:t,width:n})};"loading"!==document.readyState?p():document.addEventListener("DOMContentLoaded",p)})();
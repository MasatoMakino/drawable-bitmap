(()=>{"use strict";var __webpack_modules__={200:()=>{eval('\n;// CONCATENATED MODULE: ./bin/DrawableCanvas.js\n\nclass DrawableCanvas {\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.isDrawing = false;\n    /**\n     * ストローク中の処理\n     * @param {createjs.MouseEvent} e\n     */\n    this.onStroke = e => {\n      const point = this.points.get(e.pointerId);\n      if (point == null) return;\n      this.updateStrokeStyle();\n      const ctx = this.canvas.getContext("2d");\n      ctx.beginPath();\n      ctx.moveTo(point.x, point.y);\n      ctx.lineTo(e.offsetX, e.offsetY);\n      ctx.closePath();\n      ctx.stroke();\n      this.points.set(e.pointerId, new StrokePoint(e.offsetX, e.offsetY));\n    };\n    /**\n     * ストローク処理が開始された際の処理。\n     * ストローク座標を記録する。\n     * @param {createjs.MouseEvent} e\n     */\n    this.onStartStroke = e => {\n      this.points.set(e.pointerId, new StrokePoint(e.offsetX, e.offsetY));\n    };\n    /**\n     * ストロークが終了した際の処理。\n     * 座標マップから座標値を削除する。\n     * @param {PointerEvent} e\n     */\n    this.onFinishStroke = e => {\n      this.points.delete(e.pointerId);\n    };\n    this.option = new DrawingOption();\n    this.points = new Map();\n    this.clear();\n  }\n  clear() {\n    const ctx = this.canvas.getContext("2d");\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    //現在描画中のストロークを中断させる。\n    this.points.clear();\n    ctx.beginPath();\n  }\n  /**\n   * ユーザーによるMouse / Touchでの描画操作を開始する。\n   */\n  startDrawing(option) {\n    this.changeMode(option);\n    if (this.isDrawing) return;\n    this.isDrawing = true;\n    this.canvas.addEventListener("pointerdown", this.onStartStroke);\n    this.canvas.addEventListener("pointermove", this.onStroke);\n    this.canvas.addEventListener("pointerup", this.onFinishStroke);\n  }\n  /**\n   * ユーザーによるMouse / Touchでの描画操作を終了する。\n   */\n  finishDrawing() {\n    if (!this.isDrawing) return;\n    this.isDrawing = false;\n    this.canvas.removeEventListener("pointerdown", this.onStartStroke);\n    this.canvas.removeEventListener("pointermove", this.onStroke);\n    this.canvas.removeEventListener("pointerup", this.onFinishStroke);\n  }\n  /**\n   * 描画モードを更新する。\n   * 描画モードオプションは指定のある値だけが利用され、未指定のものは現状値が引き継がれる。\n   * @param {DrawingOption} option\n   */\n  changeMode(option) {\n    var _a, _b;\n    const ctx = this.canvas.getContext("2d");\n    this.option.mode = option.mode;\n    this.option.color = (_a = option.color) !== null && _a !== void 0 ? _a : ctx.strokeStyle;\n    this.option.width = (_b = option.width) !== null && _b !== void 0 ? _b : ctx.lineWidth;\n    this.updateStrokeStyle();\n  }\n  /**\n   * 2dコンテクストのストロークスタイルを更新する。\n   * onStroke関数の内部処理。\n   */\n  updateStrokeStyle() {\n    const ctx = this.canvas.getContext("2d");\n    switch (this.option.mode) {\n      case DrawingMode.pen:\n        ctx.globalCompositeOperation = "source-over";\n        break;\n      case DrawingMode.eraser:\n        ctx.globalCompositeOperation = "destination-out";\n        break;\n    }\n    ctx.strokeStyle = this.option.color;\n    ctx.lineWidth = this.option.width;\n    ctx.lineCap = "round";\n    ctx.lineJoin = "round";\n  }\n  /**\n   * 描画状態を画像から復元する。\n   * 対応画像はjpegおよびpngのみ。\n   * @param {string} url\n   * @param {RequestMode} mode fetchのモード指定\n   */\n  restoreImage(url, mode = "no-cors") {\n    const init = {\n      method: "GET",\n      mode: mode\n    };\n    const myRequest = new Request(url, init);\n    fetch(myRequest).then(response => {\n      return response.blob();\n    }).then(blob => {\n      this.drawImage(blob);\n    });\n  }\n  /**\n   * Fetchで取得したBlobからコンテンツタイプを確認する。\n   * jpg / png ファイルの場合はtrueを返す。\n   * @param blob\n   * @return {boolean}\n   */\n  isImageType(blob) {\n    switch (blob.type) {\n      case "image/jpeg":\n      case "image/png":\n        return true;\n    }\n    return false;\n  }\n  /**\n   * Fetchで取得したBlobをカンバス上に描画する。\n   * @param blob\n   */\n  drawImage(blob) {\n    if (!this.isImageType(blob)) return;\n    const ctx = this.canvas.getContext("2d");\n    this.clear();\n    const image = new Image();\n    image.onload = () => {\n      ctx.drawImage(image, 0, 0);\n    };\n    image.src = URL.createObjectURL(blob);\n  }\n}\nclass StrokePoint {\n  constructor(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n  }\n}\n;// CONCATENATED MODULE: ./bin/DrawableBitmap.js\nvar Bitmap = createjs.Bitmap;\nvar Shape = createjs.Shape;\n\n/**\n * DrawableCanvasをラップしたcreate.jsのディスプレイオブジェクト\n * DrawableCanvasを継承したクラスではない。\n */\nclass DrawableBitmap extends Bitmap {\n  /**\n   * コンストラクタ\n   * @param {number} w\n   * @param {number} h\n   */\n  constructor(w, h) {\n    super(document.createElement("canvas"));\n    this.redirectStartStroke = e => {\n      this.drawableCanvas.onStartStroke(DrawableBitmap.convertToDrawingEvent(e));\n    };\n    this.redirectFinishStroke = e => {\n      this.drawableCanvas.onFinishStroke(DrawableBitmap.convertToDrawingEvent(e));\n    };\n    this.redirectStroke = e => {\n      this.drawableCanvas.onStroke(DrawableBitmap.convertToDrawingEvent(e));\n    };\n    this.canvas.width = w;\n    this.canvas.height = h;\n    this.drawableCanvas = new DrawableCanvas(this.canvas);\n    this.initHitArea();\n  }\n  /**\n   * ユーザーによるMouse / Touchでの描画操作を開始する。\n   */\n  startDisplayObjectDrawing(option) {\n    this.drawableCanvas.changeMode(option);\n    if (this.isDrawing) return;\n    this.isDrawing = true;\n    this.addEventListener("mousedown", this.redirectStartStroke);\n    this.addEventListener("pressmove", this.redirectStroke);\n    this.addEventListener("pressup", this.redirectFinishStroke);\n  }\n  /**\n   * ユーザーによるMouse / Touchでの描画操作を終了する。\n   */\n  finishDisplayObjectDrawing() {\n    if (!this.isDrawing) return;\n    this.isDrawing = false;\n    this.removeEventListener("mousedown", this.redirectStartStroke);\n    this.removeEventListener("pressmove", this.redirectStroke);\n    this.removeEventListener("pressup", this.redirectFinishStroke);\n  }\n  static convertToDrawingEvent(e) {\n    return {\n      pointerId: e.pointerID,\n      offsetX: e.localX,\n      offsetY: e.localY\n    };\n  }\n  /**\n   * ヒットエリアを初期化する。\n   * CreateJSでは透明なピクセルはマウスイベントにヒットしないため、描画エリアの矩形を明示的にヒットエリアに指定する。\n   */\n  initHitArea() {\n    const area = new Shape();\n    area.graphics.beginFill("#000").drawRect(-this.regX, -this.regY, this.canvas.width, this.canvas.height).endFill();\n    this.hitArea = area;\n  }\n  get canvas() {\n    return this.image;\n  }\n}\nvar DrawingMode;\n(function (DrawingMode) {\n  DrawingMode["pen"] = "pen";\n  DrawingMode["eraser"] = "eraser";\n})(DrawingMode || (DrawingMode = {}));\nclass DrawingOption {}\n;// CONCATENATED MODULE: ./bin/index.js\n\n\n;// CONCATENATED MODULE: ./demoSrc/demo.js\n\nlet stage;\nlet bitmap;\nconst modeSelector = \'input[name="mode"]\';\nconst colorSelector = \'input[name="color"]\';\nconst widthSelector = \'input[name="width"]\';\nconst clearSelector = \'input[name="clearButton"]\';\nconst initInput = () => {\n  document.body.innerHTML =\n  //language html\n  `\n  <canvas id="appCanvas" width="640" height="480"></canvas>\n    <p>\n      mode:\n      <label><input type="radio" name="mode" value="pen" checked />pen</label>\n      <label><input type="radio" name="mode" value="eraser" />eraser</label>\n    </p>\n    <p>\n        color:\n        <label><input type="color" name="color" value="#ff00ff" /></label>\n    </p>\n    <p>\n        width:\n        <label><input type="number" name="width" min="1" max="20" value="8" /></label>\n    </p>\n    <p>\n        <input type="button" name="clearButton" value="Clear"/>\n    </p>`;\n};\nconst onDomContentsLoaded = () => {\n  initInput();\n  initInputListener();\n\n  //ステージ更新処理\n  const updateStage = () => {\n    stage.update();\n  };\n\n  //stageの初期化\n  const canvas = document.getElementById("appCanvas");\n  stage = new createjs.Stage(canvas);\n  stage.enableMouseOver();\n  createjs.Touch.enable(stage);\n  createjs.Ticker.on("tick", updateStage);\n  testBitmap();\n  initDrawing();\n  bitmap.drawableCanvas.restoreImage("./img01.png");\n};\nconst initInputListener = () => {\n  const elm = document.querySelectorAll(modeSelector);\n  elm.forEach(item => {\n    item.onchange = e => {\n      bitmap.drawableCanvas.startDrawing({\n        mode: e.target.value\n      });\n    };\n  });\n  document.querySelector(colorSelector).onchange = e => {\n    bitmap.drawableCanvas.startDrawing({\n      color: e.target.value\n    });\n  };\n  document.querySelector(widthSelector).onchange = e => {\n    bitmap.drawableCanvas.startDrawing({\n      width: e.target.value\n    });\n  };\n  document.querySelector(clearSelector).onclick = e => {\n    bitmap.drawableCanvas.clear();\n  };\n};\nconst testBitmap = () => {\n  bitmap = new DrawableBitmap(640, 480);\n  stage.addChild(bitmap);\n};\nconst initDrawing = () => {\n  const mode = document.querySelector(modeSelector + ":checked").value;\n  const color = document.querySelector(colorSelector).value;\n  const width = document.querySelector(widthSelector).value;\n  bitmap.startDisplayObjectDrawing({\n    mode: mode,\n    color: color,\n    width: width\n  });\n};\n\n/**\n * DOMContentLoaded以降に初期化処理を実行する\n */\nif (document.readyState !== "loading") {\n  onDomContentsLoaded();\n} else {\n  document.addEventListener("DOMContentLoaded", onDomContentsLoaded);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///200\n')}},__webpack_exports__={};__webpack_modules__[200]()})();
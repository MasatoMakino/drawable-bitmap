(()=>{"use strict";var __webpack_modules__={407:()=>{eval('\n;// CONCATENATED MODULE: ./bin/DrawingOption.js\nclass DrawingOption {}\n;// CONCATENATED MODULE: ./bin/DrawableCanvas.js\n\nclass DrawableCanvas {\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.isDrawing = false;\n    /**\n     * ストローク中の処理\n     */\n    this.onStroke = e => {\n      const point = this.points.get(e.pointerId);\n      if (point == null) return;\n      this.updateStrokeStyle();\n      const ctx = this.canvas.getContext("2d");\n      ctx.beginPath();\n      ctx.moveTo(point.x, point.y);\n      ctx.lineTo(e.offsetX, e.offsetY);\n      ctx.closePath();\n      ctx.stroke();\n      this.points.set(e.pointerId, new StrokePoint(e.offsetX, e.offsetY));\n    };\n    /**\n     * ストローク処理が開始された際の処理。\n     * ストローク座標を記録する。\n     */\n    this.onStartStroke = e => {\n      this.points.set(e.pointerId, new StrokePoint(e.offsetX, e.offsetY));\n    };\n    /**\n     * ストロークが終了した際の処理。\n     * 座標マップから座標値を削除する。\n     * @param {PointerEvent} e\n     */\n    this.onFinishStroke = e => {\n      this.points.delete(e.pointerId);\n    };\n    this.option = new DrawingOption();\n    this.points = new Map();\n    this.clear();\n  }\n  clear() {\n    const ctx = this.canvas.getContext("2d");\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    //現在描画中のストロークを中断させる。\n    this.points.clear();\n    ctx.beginPath();\n  }\n  /**\n   * ユーザーによるMouse / Touchでの描画操作を開始する。\n   */\n  startDrawing(option) {\n    this.changeMode(option);\n    if (this.isDrawing) return;\n    this.isDrawing = true;\n    this.canvas.addEventListener("pointerdown", this.onStartStroke);\n    this.canvas.addEventListener("pointermove", this.onStroke);\n    this.canvas.addEventListener("pointerup", this.onFinishStroke);\n  }\n  /**\n   * ユーザーによるMouse / Touchでの描画操作を終了する。\n   */\n  finishDrawing() {\n    if (!this.isDrawing) return;\n    this.isDrawing = false;\n    this.canvas.removeEventListener("pointerdown", this.onStartStroke);\n    this.canvas.removeEventListener("pointermove", this.onStroke);\n    this.canvas.removeEventListener("pointerup", this.onFinishStroke);\n  }\n  /**\n   * 描画モードを更新する。\n   * 描画モードオプションは指定のある値だけが利用され、未指定のものは現状値が引き継がれる。\n   * @param {DrawingOption} option\n   */\n  changeMode(option) {\n    const ctx = this.canvas.getContext("2d");\n    this.option.mode = option.mode;\n    this.option.color = option.color ?? ctx.strokeStyle;\n    this.option.width = option.width ?? ctx.lineWidth;\n    this.updateStrokeStyle();\n  }\n  /**\n   * 2dコンテクストのストロークスタイルを更新する。\n   * onStroke関数の内部処理。\n   */\n  updateStrokeStyle() {\n    const ctx = this.canvas.getContext("2d");\n    switch (this.option.mode) {\n      case "pen":\n        ctx.globalCompositeOperation = "source-over";\n        break;\n      case "eraser":\n        ctx.globalCompositeOperation = "destination-out";\n        break;\n    }\n    ctx.strokeStyle = this.option.color;\n    ctx.lineWidth = this.option.width;\n    ctx.lineCap = "round";\n    ctx.lineJoin = "round";\n  }\n  /**\n   * 描画状態を画像から復元する。\n   * 対応画像はjpegおよびpngのみ。\n   * @param {string} url\n   * @param {RequestMode} mode fetchのモード指定\n   */\n  restoreImage(url, mode = "no-cors") {\n    const init = {\n      method: "GET",\n      mode: mode\n    };\n    const myRequest = new Request(url, init);\n    fetch(myRequest).then(response => {\n      return response.blob();\n    }).then(blob => {\n      this.drawImage(blob);\n    });\n  }\n  /**\n   * Fetchで取得したBlobからコンテンツタイプを確認する。\n   * jpg / png ファイルの場合はtrueを返す。\n   * @param blob\n   * @return {boolean}\n   */\n  isImageType(blob) {\n    switch (blob.type) {\n      case "image/jpeg":\n      case "image/png":\n        return true;\n    }\n    return false;\n  }\n  /**\n   * Fetchで取得したBlobをカンバス上に描画する。\n   * @param blob\n   */\n  drawImage(blob) {\n    if (!this.isImageType(blob)) return;\n    const ctx = this.canvas.getContext("2d");\n    this.clear();\n    const image = new Image();\n    image.onload = () => {\n      ctx.drawImage(image, 0, 0);\n    };\n    image.src = URL.createObjectURL(blob);\n  }\n}\nclass StrokePoint {\n  constructor(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n  }\n}\n;// CONCATENATED MODULE: ./demoSrc/demo_canvas.js\n\nlet drawableCanvas;\nconst modeSelector = \'input[name="mode"]\';\nconst colorSelector = \'input[name="color"]\';\nconst widthSelector = \'input[name="width"]\';\nconst clearSelector = \'input[name="clearButton"]\';\nconst initInput = () => {\n  document.body.innerHTML =\n  //language html\n  `\n  <canvas id="appCanvas" width="640" height="480"></canvas>\n    <p>\n      mode:\n      <label><input type="radio" name="mode" value="pen" checked />pen</label>\n      <label><input type="radio" name="mode" value="eraser" />eraser</label>\n    </p>\n    <p>\n        color:\n        <label><input type="color" name="color" value="#ff00ff" /></label>\n    </p>\n    <p>\n        width:\n        <label><input type="number" name="width" min="1" max="20" value="8" /></label>\n    </p>\n    <p>\n        <input type="button" name="clearButton" value="Clear"/>\n    </p>`;\n};\nconst onDomContentsLoaded = () => {\n  initInput();\n  initInputListener();\n  const canvas = document.getElementById("appCanvas");\n  drawableCanvas = new DrawableCanvas(canvas);\n  initDrawing();\n  drawableCanvas.restoreImage("./img01.png");\n};\nconst initInputListener = () => {\n  const elm = document.querySelectorAll(modeSelector);\n  elm.forEach(item => {\n    item.onchange = e => {\n      drawableCanvas.startDrawing({\n        mode: e.target.value\n      });\n    };\n  });\n  document.querySelector(colorSelector).onchange = e => {\n    drawableCanvas.startDrawing({\n      color: e.target.value\n    });\n  };\n  document.querySelector(widthSelector).onchange = e => {\n    drawableCanvas.startDrawing({\n      width: e.target.value\n    });\n  };\n  document.querySelector(clearSelector).onclick = e => {\n    drawableCanvas.clear();\n  };\n};\nconst initDrawing = () => {\n  const mode = document.querySelector(modeSelector + ":checked").value;\n  const color = document.querySelector(colorSelector).value;\n  const width = document.querySelector(widthSelector).value;\n  drawableCanvas.startDrawing({\n    mode: mode,\n    color: color,\n    width: width\n  });\n};\n\n/**\n * DOMContentLoaded以降に初期化処理を実行する\n */\nif (document.readyState !== "loading") {\n  onDomContentsLoaded();\n} else {\n  document.addEventListener("DOMContentLoaded", onDomContentsLoaded);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFNLENBQUNDO0lBQ2xCLENBQUMsQ0FBQztFQUNKLENBQUM7RUFFRGIsUUFBUSxDQUFDYyxhQUFhLENBQUNoQixhQUFhLENBQUMsQ0FBQ2lCLE9BQU8sR0FBSWhGLENBQUMsSUFBSztJQUNyRDJELGNBQWMsQ0FBQ25DLEtBQUssQ0FBQyxDQUFDO0VBQ3hCLENBQUM7QUFDSCxDQUFDO0FBRUQsTUFBTStDLFdBQVcsR0FBR0EsQ0FBQSxLQUFNO0VBQ3hCLE1BQU10QyxJQUFJLEdBQUdnQyxRQUFRLENBQUNjLGFBQWEsQ0FBQ25CLFlBQVksR0FBRyxVQUFVLENBQUMsQ0FBQ2tCLEtBQUs7RUFDcEUsTUFBTTVDLEtBQUssR0FBRytCLFFBQVEsQ0FBQ2MsYUFBYSxDQUFDbEIsYUFBYSxDQUFDLENBQUNpQixLQUFLO0VBQ3pELE1BQU1wRCxLQUFLLEdBQUd1QyxRQUFRLENBQUNjLGFBQWEsQ0FBQ2pCLGFBQWEsQ0FBQyxDQUFDZ0IsS0FBSztFQUN6RG5CLGNBQWMsQ0FBQy9CLFlBQVksQ0FBQztJQUMxQkssSUFBSSxFQUFFQSxJQUFJO0lBQ1ZDLEtBQUssRUFBRUEsS0FBSztJQUNaUixLQUFLLEVBQUVBO0VBQ1QsQ0FBQyxDQUFDO0FBQ0osQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxJQUFJdUMsUUFBUSxDQUFDZ0IsVUFBVSxLQUFLLFNBQVMsRUFBRTtFQUNyQ2IsbUJBQW1CLENBQUMsQ0FBQztBQUN2QixDQUFDLE1BQU07RUFDTEgsUUFBUSxDQUFDbkMsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUVzQyxtQkFBbUIsQ0FBQztBQUNwRSIsInNvdXJjZXMiOlsid2VicGFjazovL2NyZWF0ZWpzLWRyYXdhYmxlLWJpdG1hcC8uL2Jpbi9EcmF3aW5nT3B0aW9uLmpzPzEwZTUiLCJ3ZWJwYWNrOi8vY3JlYXRlanMtZHJhd2FibGUtYml0bWFwLy4vYmluL0RyYXdhYmxlQ2FudmFzLmpzPzViYjgiLCJ3ZWJwYWNrOi8vY3JlYXRlanMtZHJhd2FibGUtYml0bWFwLy4vZGVtb1NyYy9kZW1vX2NhbnZhcy5qcz85N2VkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBEcmF3aW5nT3B0aW9uIHtcbn1cbiIsImltcG9ydCB7IERyYXdpbmdPcHRpb24gfSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuZXhwb3J0IGNsYXNzIERyYXdhYmxlQ2FudmFzIHtcbiAgICBjb25zdHJ1Y3RvcihjYW52YXMpIHtcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgICAgIHRoaXMuaXNEcmF3aW5nID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiDjgrnjg4jjg63jg7zjgq/kuK3jga7lh6bnkIZcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub25TdHJva2UgPSAoZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcG9pbnQgPSB0aGlzLnBvaW50cy5nZXQoZS5wb2ludGVySWQpO1xuICAgICAgICAgICAgaWYgKHBvaW50ID09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVTdHJva2VTdHlsZSgpO1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyhwb2ludC54LCBwb2ludC55KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oZS5vZmZzZXRYLCBlLm9mZnNldFkpO1xuICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgdGhpcy5wb2ludHMuc2V0KGUucG9pbnRlcklkLCBuZXcgU3Ryb2tlUG9pbnQoZS5vZmZzZXRYLCBlLm9mZnNldFkpKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOOCueODiOODreODvOOCr+WHpueQhuOBjOmWi+Wni+OBleOCjOOBn+mam+OBruWHpueQhuOAglxuICAgICAgICAgKiDjgrnjg4jjg63jg7zjgq/luqfmqJnjgpLoqJjpjLLjgZnjgovjgIJcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub25TdGFydFN0cm9rZSA9IChlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBvaW50cy5zZXQoZS5wb2ludGVySWQsIG5ldyBTdHJva2VQb2ludChlLm9mZnNldFgsIGUub2Zmc2V0WSkpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICog44K544OI44Ot44O844Kv44GM57WC5LqG44GX44Gf6Zqb44Gu5Yem55CG44CCXG4gICAgICAgICAqIOW6p+aomeODnuODg+ODl+OBi+OCieW6p+aomeWApOOCkuWJiumZpOOBmeOCi+OAglxuICAgICAgICAgKiBAcGFyYW0ge1BvaW50ZXJFdmVudH0gZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vbkZpbmlzaFN0cm9rZSA9IChlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBvaW50cy5kZWxldGUoZS5wb2ludGVySWQpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9wdGlvbiA9IG5ldyBEcmF3aW5nT3B0aW9uKCk7XG4gICAgICAgIHRoaXMucG9pbnRzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgfVxuICAgIGNsZWFyKCkge1xuICAgICAgICBjb25zdCBjdHggPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XG4gICAgICAgIC8v54++5Zyo5o+P55S75Lit44Gu44K544OI44Ot44O844Kv44KS5Lit5pat44GV44Gb44KL44CCXG4gICAgICAgIHRoaXMucG9pbnRzLmNsZWFyKCk7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44Om44O844K244O844Gr44KI44KLTW91c2UgLyBUb3VjaOOBp+OBruaPj+eUu+aTjeS9nOOCkumWi+Wni+OBmeOCi+OAglxuICAgICAqL1xuICAgIHN0YXJ0RHJhd2luZyhvcHRpb24pIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VNb2RlKG9wdGlvbik7XG4gICAgICAgIGlmICh0aGlzLmlzRHJhd2luZylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5pc0RyYXdpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcmRvd25cIiwgdGhpcy5vblN0YXJ0U3Ryb2tlKTtcbiAgICAgICAgdGhpcy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJtb3ZlXCIsIHRoaXMub25TdHJva2UpO1xuICAgICAgICB0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcnVwXCIsIHRoaXMub25GaW5pc2hTdHJva2UpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjg6bjg7zjgrbjg7zjgavjgojjgotNb3VzZSAvIFRvdWNo44Gn44Gu5o+P55S75pON5L2c44KS57WC5LqG44GZ44KL44CCXG4gICAgICovXG4gICAgZmluaXNoRHJhd2luZygpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzRHJhd2luZylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5pc0RyYXdpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJkb3duXCIsIHRoaXMub25TdGFydFN0cm9rZSk7XG4gICAgICAgIHRoaXMuY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb2ludGVybW92ZVwiLCB0aGlzLm9uU3Ryb2tlKTtcbiAgICAgICAgdGhpcy5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLCB0aGlzLm9uRmluaXNoU3Ryb2tlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog5o+P55S744Oi44O844OJ44KS5pu05paw44GZ44KL44CCXG4gICAgICog5o+P55S744Oi44O844OJ44Kq44OX44K344On44Oz44Gv5oyH5a6a44Gu44GC44KL5YCk44Gg44GR44GM5Yip55So44GV44KM44CB5pyq5oyH5a6a44Gu44KC44Gu44Gv54++54q25YCk44GM5byV44GN57aZ44GM44KM44KL44CCXG4gICAgICogQHBhcmFtIHtEcmF3aW5nT3B0aW9ufSBvcHRpb25cbiAgICAgKi9cbiAgICBjaGFuZ2VNb2RlKG9wdGlvbikge1xuICAgICAgICBjb25zdCBjdHggPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgICAgIHRoaXMub3B0aW9uLm1vZGUgPSBvcHRpb24ubW9kZTtcbiAgICAgICAgdGhpcy5vcHRpb24uY29sb3IgPSBvcHRpb24uY29sb3IgPz8gY3R4LnN0cm9rZVN0eWxlO1xuICAgICAgICB0aGlzLm9wdGlvbi53aWR0aCA9IG9wdGlvbi53aWR0aCA/PyBjdHgubGluZVdpZHRoO1xuICAgICAgICB0aGlzLnVwZGF0ZVN0cm9rZVN0eWxlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIDJk44Kz44Oz44OG44Kv44K544OI44Gu44K544OI44Ot44O844Kv44K544K/44Kk44Or44KS5pu05paw44GZ44KL44CCXG4gICAgICogb25TdHJva2XplqLmlbDjga7lhoXpg6jlh6bnkIbjgIJcbiAgICAgKi9cbiAgICB1cGRhdGVTdHJva2VTdHlsZSgpIHtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICBzd2l0Y2ggKHRoaXMub3B0aW9uLm1vZGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJwZW5cIjpcbiAgICAgICAgICAgICAgICBjdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gXCJzb3VyY2Utb3ZlclwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImVyYXNlclwiOlxuICAgICAgICAgICAgICAgIGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBcImRlc3RpbmF0aW9uLW91dFwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHRoaXMub3B0aW9uLmNvbG9yO1xuICAgICAgICBjdHgubGluZVdpZHRoID0gdGhpcy5vcHRpb24ud2lkdGg7XG4gICAgICAgIGN0eC5saW5lQ2FwID0gXCJyb3VuZFwiO1xuICAgICAgICBjdHgubGluZUpvaW4gPSBcInJvdW5kXCI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOaPj+eUu+eKtuaFi+OCkueUu+WDj+OBi+OCieW+qeWFg+OBmeOCi+OAglxuICAgICAqIOWvvuW/nOeUu+WDj+OBr2pwZWfjgYrjgojjgbNwbmfjga7jgb/jgIJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0TW9kZX0gbW9kZSBmZXRjaOOBruODouODvOODieaMh+WumlxuICAgICAqL1xuICAgIHJlc3RvcmVJbWFnZSh1cmwsIG1vZGUgPSBcIm5vLWNvcnNcIikge1xuICAgICAgICBjb25zdCBpbml0ID0ge1xuICAgICAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICAgICAgbW9kZTogbW9kZSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgbXlSZXF1ZXN0ID0gbmV3IFJlcXVlc3QodXJsLCBpbml0KTtcbiAgICAgICAgZmV0Y2gobXlSZXF1ZXN0KVxuICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuYmxvYigpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oKGJsb2IpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZHJhd0ltYWdlKGJsb2IpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmV0Y2jjgaflj5blvpfjgZfjgZ9CbG9i44GL44KJ44Kz44Oz44OG44Oz44OE44K/44Kk44OX44KS56K66KqN44GZ44KL44CCXG4gICAgICoganBnIC8gcG5nIOODleOCoeOCpOODq+OBruWgtOWQiOOBr3RydWXjgpLov5TjgZnjgIJcbiAgICAgKiBAcGFyYW0gYmxvYlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAgICovXG4gICAgaXNJbWFnZVR5cGUoYmxvYikge1xuICAgICAgICBzd2l0Y2ggKGJsb2IudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcImltYWdlL2pwZWdcIjpcbiAgICAgICAgICAgIGNhc2UgXCJpbWFnZS9wbmdcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZldGNo44Gn5Y+W5b6X44GX44GfQmxvYuOCkuOCq+ODs+ODkOOCueS4iuOBq+aPj+eUu+OBmeOCi+OAglxuICAgICAqIEBwYXJhbSBibG9iXG4gICAgICovXG4gICAgZHJhd0ltYWdlKGJsb2IpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzSW1hZ2VUeXBlKGJsb2IpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBjdHggPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgaW1hZ2Uub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShpbWFnZSwgMCwgMCk7XG4gICAgICAgIH07XG4gICAgICAgIGltYWdlLnNyYyA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFN0cm9rZVBvaW50IHtcbiAgICBjb25zdHJ1Y3Rvcih4ID0gMCwgeSA9IDApIHtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBEcmF3YWJsZUNhbnZhcyB9IGZyb20gXCIuLi9iaW4vaW5kZXguanNcIjtcblxubGV0IGRyYXdhYmxlQ2FudmFzO1xuXG5jb25zdCBtb2RlU2VsZWN0b3IgPSAnaW5wdXRbbmFtZT1cIm1vZGVcIl0nO1xuY29uc3QgY29sb3JTZWxlY3RvciA9ICdpbnB1dFtuYW1lPVwiY29sb3JcIl0nO1xuY29uc3Qgd2lkdGhTZWxlY3RvciA9ICdpbnB1dFtuYW1lPVwid2lkdGhcIl0nO1xuY29uc3QgY2xlYXJTZWxlY3RvciA9ICdpbnB1dFtuYW1lPVwiY2xlYXJCdXR0b25cIl0nO1xuXG5jb25zdCBpbml0SW5wdXQgPSAoKSA9PiB7XG4gIGRvY3VtZW50LmJvZHkuaW5uZXJIVE1MID1cbiAgICAvL2xhbmd1YWdlIGh0bWxcbiAgICBgXG4gIDxjYW52YXMgaWQ9XCJhcHBDYW52YXNcIiB3aWR0aD1cIjY0MFwiIGhlaWdodD1cIjQ4MFwiPjwvY2FudmFzPlxuICAgIDxwPlxuICAgICAgbW9kZTpcbiAgICAgIDxsYWJlbD48aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cIm1vZGVcIiB2YWx1ZT1cInBlblwiIGNoZWNrZWQgLz5wZW48L2xhYmVsPlxuICAgICAgPGxhYmVsPjxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwibW9kZVwiIHZhbHVlPVwiZXJhc2VyXCIgLz5lcmFzZXI8L2xhYmVsPlxuICAgIDwvcD5cbiAgICA8cD5cbiAgICAgICAgY29sb3I6XG4gICAgICAgIDxsYWJlbD48aW5wdXQgdHlwZT1cImNvbG9yXCIgbmFtZT1cImNvbG9yXCIgdmFsdWU9XCIjZmYwMGZmXCIgLz48L2xhYmVsPlxuICAgIDwvcD5cbiAgICA8cD5cbiAgICAgICAgd2lkdGg6XG4gICAgICAgIDxsYWJlbD48aW5wdXQgdHlwZT1cIm51bWJlclwiIG5hbWU9XCJ3aWR0aFwiIG1pbj1cIjFcIiBtYXg9XCIyMFwiIHZhbHVlPVwiOFwiIC8+PC9sYWJlbD5cbiAgICA8L3A+XG4gICAgPHA+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwiYnV0dG9uXCIgbmFtZT1cImNsZWFyQnV0dG9uXCIgdmFsdWU9XCJDbGVhclwiLz5cbiAgICA8L3A+YDtcbn07XG5jb25zdCBvbkRvbUNvbnRlbnRzTG9hZGVkID0gKCkgPT4ge1xuICBpbml0SW5wdXQoKTtcbiAgaW5pdElucHV0TGlzdGVuZXIoKTtcblxuICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFwcENhbnZhc1wiKTtcbiAgZHJhd2FibGVDYW52YXMgPSBuZXcgRHJhd2FibGVDYW52YXMoY2FudmFzKTtcbiAgaW5pdERyYXdpbmcoKTtcblxuICBkcmF3YWJsZUNhbnZhcy5yZXN0b3JlSW1hZ2UoXCIuL2ltZzAxLnBuZ1wiKTtcbn07XG5cbmNvbnN0IGluaXRJbnB1dExpc3RlbmVyID0gKCkgPT4ge1xuICBjb25zdCBlbG0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKG1vZGVTZWxlY3Rvcik7XG4gIGVsbS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgaXRlbS5vbmNoYW5nZSA9IChlKSA9PiB7XG4gICAgICBkcmF3YWJsZUNhbnZhcy5zdGFydERyYXdpbmcoeyBtb2RlOiBlLnRhcmdldC52YWx1ZSB9KTtcbiAgICB9O1xuICB9KTtcblxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbG9yU2VsZWN0b3IpLm9uY2hhbmdlID0gKGUpID0+IHtcbiAgICBkcmF3YWJsZUNhbnZhcy5zdGFydERyYXdpbmcoe1xuICAgICAgY29sb3I6IGUudGFyZ2V0LnZhbHVlLFxuICAgIH0pO1xuICB9O1xuXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Iod2lkdGhTZWxlY3Rvcikub25jaGFuZ2UgPSAoZSkgPT4ge1xuICAgIGRyYXdhYmxlQ2FudmFzLnN0YXJ0RHJhd2luZyh7XG4gICAgICB3aWR0aDogZS50YXJnZXQudmFsdWUsXG4gICAgfSk7XG4gIH07XG5cbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihjbGVhclNlbGVjdG9yKS5vbmNsaWNrID0gKGUpID0+IHtcbiAgICBkcmF3YWJsZUNhbnZhcy5jbGVhcigpO1xuICB9O1xufTtcblxuY29uc3QgaW5pdERyYXdpbmcgPSAoKSA9PiB7XG4gIGNvbnN0IG1vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG1vZGVTZWxlY3RvciArIFwiOmNoZWNrZWRcIikudmFsdWU7XG4gIGNvbnN0IGNvbG9yID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb2xvclNlbGVjdG9yKS52YWx1ZTtcbiAgY29uc3Qgd2lkdGggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHdpZHRoU2VsZWN0b3IpLnZhbHVlO1xuICBkcmF3YWJsZUNhbnZhcy5zdGFydERyYXdpbmcoe1xuICAgIG1vZGU6IG1vZGUsXG4gICAgY29sb3I6IGNvbG9yLFxuICAgIHdpZHRoOiB3aWR0aCxcbiAgfSk7XG59O1xuXG4vKipcbiAqIERPTUNvbnRlbnRMb2FkZWTku6XpmY3jgavliJ3mnJ/ljJblh6bnkIbjgpLlrp/ooYzjgZnjgotcbiAqL1xuaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiKSB7XG4gIG9uRG9tQ29udGVudHNMb2FkZWQoKTtcbn0gZWxzZSB7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIG9uRG9tQ29udGVudHNMb2FkZWQpO1xufVxuIl0sIm5hbWVzIjpbIkRyYXdpbmdPcHRpb24iLCJEcmF3YWJsZUNhbnZhcyIsImNvbnN0cnVjdG9yIiwiY2FudmFzIiwiaXNEcmF3aW5nIiwib25TdHJva2UiLCJlIiwicG9pbnQiLCJwb2ludHMiLCJnZXQiLCJwb2ludGVySWQiLCJ1cGRhdGVTdHJva2VTdHlsZSIsImN0eCIsImdldENvbnRleHQiLCJiZWdpblBhdGgiLCJtb3ZlVG8iLCJ4IiwieSIsImxpbmVUbyIsIm9mZnNldFgiLCJvZmZzZXRZIiwiY2xvc2VQYXRoIiwic3Ryb2tlIiwic2V0IiwiU3Ryb2tlUG9pbnQiLCJvblN0YXJ0U3Ryb2tlIiwib25GaW5pc2hTdHJva2UiLCJkZWxldGUiLCJvcHRpb24iLCJNYXAiLCJjbGVhciIsImNsZWFyUmVjdCIsIndpZHRoIiwiaGVpZ2h0Iiwic3RhcnREcmF3aW5nIiwiY2hhbmdlTW9kZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJmaW5pc2hEcmF3aW5nIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm1vZGUiLCJjb2xvciIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwibGluZUNhcCIsImxpbmVKb2luIiwicmVzdG9yZUltYWdlIiwidXJsIiwiaW5pdCIsIm1ldGhvZCIsIm15UmVxdWVzdCIsIlJlcXVlc3QiLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsImJsb2IiLCJkcmF3SW1hZ2UiLCJpc0ltYWdlVHlwZSIsInR5cGUiLCJpbWFnZSIsIkltYWdlIiwib25sb2FkIiwic3JjIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiZHJhd2FibGVDYW52YXMiLCJtb2RlU2VsZWN0b3IiLCJjb2xvclNlbGVjdG9yIiwid2lkdGhTZWxlY3RvciIsImNsZWFyU2VsZWN0b3IiLCJpbml0SW5wdXQiLCJkb2N1bWVudCIsImJvZHkiLCJpbm5lckhUTUwiLCJvbkRvbUNvbnRlbnRzTG9hZGVkIiwiaW5pdElucHV0TGlzdGVuZXIiLCJnZXRFbGVtZW50QnlJZCIsImluaXREcmF3aW5nIiwiZWxtIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJpdGVtIiwib25jaGFuZ2UiLCJ0YXJnZXQiLCJ2YWx1ZSIsInF1ZXJ5U2VsZWN0b3IiLCJvbmNsaWNrIiwicmVhZHlTdGF0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///407\n')}},__webpack_exports__={};__webpack_modules__[407]()})();
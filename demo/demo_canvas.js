(()=>{"use strict";var __webpack_modules__={407:()=>{eval('\n;// CONCATENATED MODULE: ./bin/DrawingOption.js\nclass DrawingOption {}\n;// CONCATENATED MODULE: ./bin/DrawableCanvas.js\n\nclass DrawableCanvas {\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.isDrawing = false;\n    /**\n     * ストローク中の処理\n     */\n    this.onStroke = e => {\n      const point = this.points.get(e.pointerId);\n      if (point == null) return;\n      this.updateStrokeStyle();\n      const ctx = this.canvas.getContext("2d");\n      ctx.beginPath();\n      ctx.moveTo(point.x, point.y);\n      ctx.lineTo(e.offsetX, e.offsetY);\n      ctx.closePath();\n      ctx.stroke();\n      this.points.set(e.pointerId, new StrokePoint(e.offsetX, e.offsetY));\n    };\n    /**\n     * ストローク処理が開始された際の処理。\n     * ストローク座標を記録する。\n     */\n    this.onStartStroke = e => {\n      this.points.set(e.pointerId, new StrokePoint(e.offsetX, e.offsetY));\n    };\n    /**\n     * ストロークが終了した際の処理。\n     * 座標マップから座標値を削除する。\n     * @param {PointerEvent} e\n     */\n    this.onFinishStroke = e => {\n      this.points.delete(e.pointerId);\n    };\n    this.option = new DrawingOption();\n    this.points = new Map();\n    this.clear();\n  }\n  clear() {\n    const ctx = this.canvas.getContext("2d");\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    //現在描画中のストロークを中断させる。\n    this.points.clear();\n    ctx.beginPath();\n  }\n  /**\n   * ユーザーによるMouse / Touchでの描画操作を開始する。\n   */\n  startDrawing(option) {\n    this.changeMode(option);\n    if (this.isDrawing) return;\n    this.isDrawing = true;\n    this.canvas.addEventListener("pointerdown", this.onStartStroke);\n    this.canvas.addEventListener("pointermove", this.onStroke);\n    this.canvas.addEventListener("pointerup", this.onFinishStroke);\n  }\n  /**\n   * ユーザーによるMouse / Touchでの描画操作を終了する。\n   */\n  finishDrawing() {\n    if (!this.isDrawing) return;\n    this.isDrawing = false;\n    this.canvas.removeEventListener("pointerdown", this.onStartStroke);\n    this.canvas.removeEventListener("pointermove", this.onStroke);\n    this.canvas.removeEventListener("pointerup", this.onFinishStroke);\n  }\n  /**\n   * 描画モードを更新する。\n   * 描画モードオプションは指定のある値だけが利用され、未指定のものは現状値が引き継がれる。\n   * @param {DrawingOption} option\n   */\n  changeMode(option) {\n    const ctx = this.canvas.getContext("2d");\n    this.option.mode = option.mode;\n    this.option.color = option.color ?? ctx.strokeStyle;\n    this.option.width = option.width ?? ctx.lineWidth;\n    this.updateStrokeStyle();\n  }\n  /**\n   * 2dコンテクストのストロークスタイルを更新する。\n   * onStroke関数の内部処理。\n   */\n  updateStrokeStyle() {\n    const ctx = this.canvas.getContext("2d");\n    switch (this.option.mode) {\n      case "pen":\n        ctx.globalCompositeOperation = "source-over";\n        break;\n      case "eraser":\n        ctx.globalCompositeOperation = "destination-out";\n        break;\n    }\n    ctx.strokeStyle = this.option.color;\n    ctx.lineWidth = this.option.width;\n    ctx.lineCap = "round";\n    ctx.lineJoin = "round";\n  }\n  /**\n   * 描画状態を画像から復元する。\n   * 対応画像はjpegおよびpngのみ。\n   * @param {string} url\n   * @param {RequestMode} mode fetchのモード指定\n   */\n  restoreImage(url, mode = "no-cors") {\n    const init = {\n      method: "GET",\n      mode: mode\n    };\n    const myRequest = new Request(url, init);\n    return fetch(myRequest).then(response => {\n      return response.blob();\n    }).then(blob => {\n      return this.drawImage(blob);\n    });\n  }\n  /**\n   * Fetchで取得したBlobからコンテンツタイプを確認する。\n   * jpg / png ファイルの場合はtrueを返す。\n   * @param blob\n   * @return {boolean}\n   */\n  isImageType(blob) {\n    switch (blob.type) {\n      case "image/jpeg":\n      case "image/png":\n        return true;\n    }\n    return false;\n  }\n  /**\n   * Fetchで取得したBlobをカンバス上に描画する。\n   * @param blob\n   */\n  drawImage(blob) {\n    return new Promise((resolve, reject) => {\n      if (!this.isImageType(blob)) {\n        resolve();\n      }\n      const image = new Image();\n      const ctx = this.canvas.getContext("2d");\n      this.clear();\n      image.onload = () => {\n        ctx.drawImage(image, 0, 0);\n        resolve();\n      };\n      image.onerror = () => {\n        reject();\n      };\n      image.src = URL.createObjectURL(blob);\n    });\n  }\n}\nclass StrokePoint {\n  constructor(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n  }\n}\n;// CONCATENATED MODULE: ./demoSrc/demo_canvas.js\n\nlet drawableCanvas;\nconst modeSelector = \'input[name="mode"]\';\nconst colorSelector = \'input[name="color"]\';\nconst widthSelector = \'input[name="width"]\';\nconst clearSelector = \'input[name="clearButton"]\';\nconst initInput = () => {\n  document.body.innerHTML =\n  //language html\n  `\n  <canvas id="appCanvas" width="640" height="480"></canvas>\n    <p>\n      mode:\n      <label><input type="radio" name="mode" value="pen" checked />pen</label>\n      <label><input type="radio" name="mode" value="eraser" />eraser</label>\n    </p>\n    <p>\n        color:\n        <label><input type="color" name="color" value="#ff00ff" /></label>\n    </p>\n    <p>\n        width:\n        <label><input type="number" name="width" min="1" max="20" value="8" /></label>\n    </p>\n    <p>\n        <input type="button" name="clearButton" value="Clear"/>\n    </p>`;\n};\nconst onDomContentsLoaded = () => {\n  initInput();\n  initInputListener();\n  const canvas = document.getElementById("appCanvas");\n  drawableCanvas = new DrawableCanvas(canvas);\n  initDrawing();\n  drawableCanvas.restoreImage("./img01.png");\n};\nconst initInputListener = () => {\n  const elm = document.querySelectorAll(modeSelector);\n  elm.forEach(item => {\n    item.onchange = e => {\n      drawableCanvas.startDrawing({\n        mode: e.target.value\n      });\n    };\n  });\n  document.querySelector(colorSelector).onchange = e => {\n    drawableCanvas.startDrawing({\n      color: e.target.value\n    });\n  };\n  document.querySelector(widthSelector).onchange = e => {\n    drawableCanvas.startDrawing({\n      width: e.target.value\n    });\n  };\n  document.querySelector(clearSelector).onclick = e => {\n    drawableCanvas.clear();\n  };\n};\nconst initDrawing = () => {\n  const mode = document.querySelector(modeSelector + ":checked").value;\n  const color = document.querySelector(colorSelector).value;\n  const width = document.querySelector(widthSelector).value;\n  drawableCanvas.startDrawing({\n    mode: mode,\n    color: color,\n    width: width\n  });\n};\n\n/**\n * DOMContentLoaded以降に初期化処理を実行する\n */\nif (document.readyState !== "loading") {\n  onDomContentsLoaded();\n} else {\n  document.addEventListener("DOMContentLoaded", onDomContentsLoaded);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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YWNrOi8vY3JlYXRlanMtZHJhd2FibGUtYml0bWFwLy4vYmluL0RyYXdpbmdPcHRpb24uanM/MTBlNSIsIndlYnBhY2s6Ly9jcmVhdGVqcy1kcmF3YWJsZS1iaXRtYXAvLi9iaW4vRHJhd2FibGVDYW52YXMuanM/NWJiOCIsIndlYnBhY2s6Ly9jcmVhdGVqcy1kcmF3YWJsZS1iaXRtYXAvLi9kZW1vU3JjL2RlbW9fY2FudmFzLmpzPzk3ZWQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIERyYXdpbmdPcHRpb24ge1xufVxuIiwiaW1wb3J0IHsgRHJhd2luZ09wdGlvbiB9IGZyb20gXCIuL2luZGV4LmpzXCI7XG5leHBvcnQgY2xhc3MgRHJhd2FibGVDYW52YXMge1xuICAgIGNvbnN0cnVjdG9yKGNhbnZhcykge1xuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcbiAgICAgICAgdGhpcy5pc0RyYXdpbmcgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOOCueODiOODreODvOOCr+S4reOBruWHpueQhlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vblN0cm9rZSA9IChlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwb2ludCA9IHRoaXMucG9pbnRzLmdldChlLnBvaW50ZXJJZCk7XG4gICAgICAgICAgICBpZiAocG9pbnQgPT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVN0cm9rZVN0eWxlKCk7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjdHgubW92ZVRvKHBvaW50LngsIHBvaW50LnkpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyhlLm9mZnNldFgsIGUub2Zmc2V0WSk7XG4gICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgICAgICB0aGlzLnBvaW50cy5zZXQoZS5wb2ludGVySWQsIG5ldyBTdHJva2VQb2ludChlLm9mZnNldFgsIGUub2Zmc2V0WSkpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICog44K544OI44Ot44O844Kv5Yem55CG44GM6ZaL5aeL44GV44KM44Gf6Zqb44Gu5Yem55CG44CCXG4gICAgICAgICAqIOOCueODiOODreODvOOCr+W6p+aomeOCkuiomOmMsuOBmeOCi+OAglxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vblN0YXJ0U3Ryb2tlID0gKGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMucG9pbnRzLnNldChlLnBvaW50ZXJJZCwgbmV3IFN0cm9rZVBvaW50KGUub2Zmc2V0WCwgZS5vZmZzZXRZKSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiDjgrnjg4jjg63jg7zjgq/jgYzntYLkuobjgZfjgZ/pmpvjga7lh6bnkIbjgIJcbiAgICAgICAgICog5bqn5qiZ44Oe44OD44OX44GL44KJ5bqn5qiZ5YCk44KS5YmK6Zmk44GZ44KL44CCXG4gICAgICAgICAqIEBwYXJhbSB7UG9pbnRlckV2ZW50fSBlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9uRmluaXNoU3Ryb2tlID0gKGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMucG9pbnRzLmRlbGV0ZShlLnBvaW50ZXJJZCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub3B0aW9uID0gbmV3IERyYXdpbmdPcHRpb24oKTtcbiAgICAgICAgdGhpcy5wb2ludHMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgLy/nj77lnKjmj4/nlLvkuK3jga7jgrnjg4jjg63jg7zjgq/jgpLkuK3mlq3jgZXjgZvjgovjgIJcbiAgICAgICAgdGhpcy5wb2ludHMuY2xlYXIoKTtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjg6bjg7zjgrbjg7zjgavjgojjgotNb3VzZSAvIFRvdWNo44Gn44Gu5o+P55S75pON5L2c44KS6ZaL5aeL44GZ44KL44CCXG4gICAgICovXG4gICAgc3RhcnREcmF3aW5nKG9wdGlvbikge1xuICAgICAgICB0aGlzLmNoYW5nZU1vZGUob3B0aW9uKTtcbiAgICAgICAgaWYgKHRoaXMuaXNEcmF3aW5nKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmlzRHJhd2luZyA9IHRydWU7XG4gICAgICAgIHRoaXMuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVyZG93blwiLCB0aGlzLm9uU3RhcnRTdHJva2UpO1xuICAgICAgICB0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcm1vdmVcIiwgdGhpcy5vblN0cm9rZSk7XG4gICAgICAgIHRoaXMuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgdGhpcy5vbkZpbmlzaFN0cm9rZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOODpuODvOOCtuODvOOBq+OCiOOCi01vdXNlIC8gVG91Y2jjgafjga7mj4/nlLvmk43kvZzjgpLntYLkuobjgZnjgovjgIJcbiAgICAgKi9cbiAgICBmaW5pc2hEcmF3aW5nKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNEcmF3aW5nKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmlzRHJhd2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcmRvd25cIiwgdGhpcy5vblN0YXJ0U3Ryb2tlKTtcbiAgICAgICAgdGhpcy5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJtb3ZlXCIsIHRoaXMub25TdHJva2UpO1xuICAgICAgICB0aGlzLmNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcnVwXCIsIHRoaXMub25GaW5pc2hTdHJva2UpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDmj4/nlLvjg6Ljg7zjg4njgpLmm7TmlrDjgZnjgovjgIJcbiAgICAgKiDmj4/nlLvjg6Ljg7zjg4njgqrjg5fjgrfjg6fjg7Pjga/mjIflrprjga7jgYLjgovlgKTjgaDjgZHjgYzliKnnlKjjgZXjgozjgIHmnKrmjIflrprjga7jgoLjga7jga/nj77nirblgKTjgYzlvJXjgY3ntpnjgYzjgozjgovjgIJcbiAgICAgKiBAcGFyYW0ge0RyYXdpbmdPcHRpb259IG9wdGlvblxuICAgICAqL1xuICAgIGNoYW5nZU1vZGUob3B0aW9uKSB7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgdGhpcy5vcHRpb24ubW9kZSA9IG9wdGlvbi5tb2RlO1xuICAgICAgICB0aGlzLm9wdGlvbi5jb2xvciA9IG9wdGlvbi5jb2xvciA/PyBjdHguc3Ryb2tlU3R5bGU7XG4gICAgICAgIHRoaXMub3B0aW9uLndpZHRoID0gb3B0aW9uLndpZHRoID8/IGN0eC5saW5lV2lkdGg7XG4gICAgICAgIHRoaXMudXBkYXRlU3Ryb2tlU3R5bGUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogMmTjgrPjg7Pjg4bjgq/jgrnjg4jjga7jgrnjg4jjg63jg7zjgq/jgrnjgr/jgqTjg6vjgpLmm7TmlrDjgZnjgovjgIJcbiAgICAgKiBvblN0cm9rZemWouaVsOOBruWGhemDqOWHpueQhuOAglxuICAgICAqL1xuICAgIHVwZGF0ZVN0cm9rZVN0eWxlKCkge1xuICAgICAgICBjb25zdCBjdHggPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgICAgIHN3aXRjaCAodGhpcy5vcHRpb24ubW9kZSkge1xuICAgICAgICAgICAgY2FzZSBcInBlblwiOlxuICAgICAgICAgICAgICAgIGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBcInNvdXJjZS1vdmVyXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZXJhc2VyXCI6XG4gICAgICAgICAgICAgICAgY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IFwiZGVzdGluYXRpb24tb3V0XCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gdGhpcy5vcHRpb24uY29sb3I7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSB0aGlzLm9wdGlvbi53aWR0aDtcbiAgICAgICAgY3R4LmxpbmVDYXAgPSBcInJvdW5kXCI7XG4gICAgICAgIGN0eC5saW5lSm9pbiA9IFwicm91bmRcIjtcbiAgICB9XG4gICAgLyoqXG4gICAgICog5o+P55S754q25oWL44KS55S75YOP44GL44KJ5b6p5YWD44GZ44KL44CCXG4gICAgICog5a++5b+c55S75YOP44GvanBlZ+OBiuOCiOOBs3BuZ+OBruOBv+OAglxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RNb2RlfSBtb2RlIGZldGNo44Gu44Oi44O844OJ5oyH5a6aXG4gICAgICovXG4gICAgcmVzdG9yZUltYWdlKHVybCwgbW9kZSA9IFwibm8tY29yc1wiKSB7XG4gICAgICAgIGNvbnN0IGluaXQgPSB7XG4gICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgICAgICBtb2RlOiBtb2RlLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBteVJlcXVlc3QgPSBuZXcgUmVxdWVzdCh1cmwsIGluaXQpO1xuICAgICAgICByZXR1cm4gZmV0Y2gobXlSZXF1ZXN0KVxuICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuYmxvYigpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oKGJsb2IpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRyYXdJbWFnZShibG9iKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZldGNo44Gn5Y+W5b6X44GX44GfQmxvYuOBi+OCieOCs+ODs+ODhuODs+ODhOOCv+OCpOODl+OCkueiuuiqjeOBmeOCi+OAglxuICAgICAqIGpwZyAvIHBuZyDjg5XjgqHjgqTjg6vjga7loLTlkIjjga90cnVl44KS6L+U44GZ44CCXG4gICAgICogQHBhcmFtIGJsb2JcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgICAqL1xuICAgIGlzSW1hZ2VUeXBlKGJsb2IpIHtcbiAgICAgICAgc3dpdGNoIChibG9iLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJpbWFnZS9qcGVnXCI6XG4gICAgICAgICAgICBjYXNlIFwiaW1hZ2UvcG5nXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZXRjaOOBp+WPluW+l+OBl+OBn0Jsb2LjgpLjgqvjg7Pjg5DjgrnkuIrjgavmj4/nlLvjgZnjgovjgIJcbiAgICAgKiBAcGFyYW0gYmxvYlxuICAgICAqL1xuICAgIGRyYXdJbWFnZShibG9iKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNJbWFnZVR5cGUoYmxvYikpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICAgICAgaW1hZ2Uub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDApO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpbWFnZS5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGltYWdlLnNyYyA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBTdHJva2VQb2ludCB7XG4gICAgY29uc3RydWN0b3IoeCA9IDAsIHkgPSAwKSB7XG4gICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgIHRoaXMueSA9IHk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRHJhd2FibGVDYW52YXMgfSBmcm9tIFwiLi4vYmluL2luZGV4LmpzXCI7XG5cbmxldCBkcmF3YWJsZUNhbnZhcztcblxuY29uc3QgbW9kZVNlbGVjdG9yID0gJ2lucHV0W25hbWU9XCJtb2RlXCJdJztcbmNvbnN0IGNvbG9yU2VsZWN0b3IgPSAnaW5wdXRbbmFtZT1cImNvbG9yXCJdJztcbmNvbnN0IHdpZHRoU2VsZWN0b3IgPSAnaW5wdXRbbmFtZT1cIndpZHRoXCJdJztcbmNvbnN0IGNsZWFyU2VsZWN0b3IgPSAnaW5wdXRbbmFtZT1cImNsZWFyQnV0dG9uXCJdJztcblxuY29uc3QgaW5pdElucHV0ID0gKCkgPT4ge1xuICBkb2N1bWVudC5ib2R5LmlubmVySFRNTCA9XG4gICAgLy9sYW5ndWFnZSBodG1sXG4gICAgYFxuICA8Y2FudmFzIGlkPVwiYXBwQ2FudmFzXCIgd2lkdGg9XCI2NDBcIiBoZWlnaHQ9XCI0ODBcIj48L2NhbnZhcz5cbiAgICA8cD5cbiAgICAgIG1vZGU6XG4gICAgICA8bGFiZWw+PGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJtb2RlXCIgdmFsdWU9XCJwZW5cIiBjaGVja2VkIC8+cGVuPC9sYWJlbD5cbiAgICAgIDxsYWJlbD48aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cIm1vZGVcIiB2YWx1ZT1cImVyYXNlclwiIC8+ZXJhc2VyPC9sYWJlbD5cbiAgICA8L3A+XG4gICAgPHA+XG4gICAgICAgIGNvbG9yOlxuICAgICAgICA8bGFiZWw+PGlucHV0IHR5cGU9XCJjb2xvclwiIG5hbWU9XCJjb2xvclwiIHZhbHVlPVwiI2ZmMDBmZlwiIC8+PC9sYWJlbD5cbiAgICA8L3A+XG4gICAgPHA+XG4gICAgICAgIHdpZHRoOlxuICAgICAgICA8bGFiZWw+PGlucHV0IHR5cGU9XCJudW1iZXJcIiBuYW1lPVwid2lkdGhcIiBtaW49XCIxXCIgbWF4PVwiMjBcIiB2YWx1ZT1cIjhcIiAvPjwvbGFiZWw+XG4gICAgPC9wPlxuICAgIDxwPlxuICAgICAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIG5hbWU9XCJjbGVhckJ1dHRvblwiIHZhbHVlPVwiQ2xlYXJcIi8+XG4gICAgPC9wPmA7XG59O1xuY29uc3Qgb25Eb21Db250ZW50c0xvYWRlZCA9ICgpID0+IHtcbiAgaW5pdElucHV0KCk7XG4gIGluaXRJbnB1dExpc3RlbmVyKCk7XG5cbiAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhcHBDYW52YXNcIik7XG4gIGRyYXdhYmxlQ2FudmFzID0gbmV3IERyYXdhYmxlQ2FudmFzKGNhbnZhcyk7XG4gIGluaXREcmF3aW5nKCk7XG5cbiAgZHJhd2FibGVDYW52YXMucmVzdG9yZUltYWdlKFwiLi9pbWcwMS5wbmdcIik7XG59O1xuXG5jb25zdCBpbml0SW5wdXRMaXN0ZW5lciA9ICgpID0+IHtcbiAgY29uc3QgZWxtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChtb2RlU2VsZWN0b3IpO1xuICBlbG0uZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgIGl0ZW0ub25jaGFuZ2UgPSAoZSkgPT4ge1xuICAgICAgZHJhd2FibGVDYW52YXMuc3RhcnREcmF3aW5nKHsgbW9kZTogZS50YXJnZXQudmFsdWUgfSk7XG4gICAgfTtcbiAgfSk7XG5cbiAgZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb2xvclNlbGVjdG9yKS5vbmNoYW5nZSA9IChlKSA9PiB7XG4gICAgZHJhd2FibGVDYW52YXMuc3RhcnREcmF3aW5nKHtcbiAgICAgIGNvbG9yOiBlLnRhcmdldC52YWx1ZSxcbiAgICB9KTtcbiAgfTtcblxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHdpZHRoU2VsZWN0b3IpLm9uY2hhbmdlID0gKGUpID0+IHtcbiAgICBkcmF3YWJsZUNhbnZhcy5zdGFydERyYXdpbmcoe1xuICAgICAgd2lkdGg6IGUudGFyZ2V0LnZhbHVlLFxuICAgIH0pO1xuICB9O1xuXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY2xlYXJTZWxlY3Rvcikub25jbGljayA9IChlKSA9PiB7XG4gICAgZHJhd2FibGVDYW52YXMuY2xlYXIoKTtcbiAgfTtcbn07XG5cbmNvbnN0IGluaXREcmF3aW5nID0gKCkgPT4ge1xuICBjb25zdCBtb2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihtb2RlU2VsZWN0b3IgKyBcIjpjaGVja2VkXCIpLnZhbHVlO1xuICBjb25zdCBjb2xvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29sb3JTZWxlY3RvcikudmFsdWU7XG4gIGNvbnN0IHdpZHRoID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih3aWR0aFNlbGVjdG9yKS52YWx1ZTtcbiAgZHJhd2FibGVDYW52YXMuc3RhcnREcmF3aW5nKHtcbiAgICBtb2RlOiBtb2RlLFxuICAgIGNvbG9yOiBjb2xvcixcbiAgICB3aWR0aDogd2lkdGgsXG4gIH0pO1xufTtcblxuLyoqXG4gKiBET01Db250ZW50TG9hZGVk5Lul6ZmN44Gr5Yid5pyf5YyW5Yem55CG44KS5a6f6KGM44GZ44KLXG4gKi9cbmlmIChkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIikge1xuICBvbkRvbUNvbnRlbnRzTG9hZGVkKCk7XG59IGVsc2Uge1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBvbkRvbUNvbnRlbnRzTG9hZGVkKTtcbn1cbiJdLCJuYW1lcyI6WyJEcmF3aW5nT3B0aW9uIiwiRHJhd2FibGVDYW52YXMiLCJjb25zdHJ1Y3RvciIsImNhbnZhcyIsImlzRHJhd2luZyIsIm9uU3Ryb2tlIiwiZSIsInBvaW50IiwicG9pbnRzIiwiZ2V0IiwicG9pbnRlcklkIiwidXBkYXRlU3Ryb2tlU3R5bGUiLCJjdHgiLCJnZXRDb250ZXh0IiwiYmVnaW5QYXRoIiwibW92ZVRvIiwieCIsInkiLCJsaW5lVG8iLCJvZmZzZXRYIiwib2Zmc2V0WSIsImNsb3NlUGF0aCIsInN0cm9rZSIsInNldCIsIlN0cm9rZVBvaW50Iiwib25TdGFydFN0cm9rZSIsIm9uRmluaXNoU3Ryb2tlIiwiZGVsZXRlIiwib3B0aW9uIiwiTWFwIiwiY2xlYXIiLCJjbGVhclJlY3QiLCJ3aWR0aCIsImhlaWdodCIsInN0YXJ0RHJhd2luZyIsImNoYW5nZU1vZGUiLCJhZGRFdmVudExpc3RlbmVyIiwiZmluaXNoRHJhd2luZyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJtb2RlIiwiY29sb3IiLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsImdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiIsImxpbmVDYXAiLCJsaW5lSm9pbiIsInJlc3RvcmVJbWFnZSIsInVybCIsImluaXQiLCJtZXRob2QiLCJteVJlcXVlc3QiLCJSZXF1ZXN0IiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJibG9iIiwiZHJhd0ltYWdlIiwiaXNJbWFnZVR5cGUiLCJ0eXBlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJpbWFnZSIsIkltYWdlIiwib25sb2FkIiwib25lcnJvciIsInNyYyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsImRyYXdhYmxlQ2FudmFzIiwibW9kZVNlbGVjdG9yIiwiY29sb3JTZWxlY3RvciIsIndpZHRoU2VsZWN0b3IiLCJjbGVhclNlbGVjdG9yIiwiaW5pdElucHV0IiwiZG9jdW1lbnQiLCJib2R5IiwiaW5uZXJIVE1MIiwib25Eb21Db250ZW50c0xvYWRlZCIsImluaXRJbnB1dExpc3RlbmVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJpbml0RHJhd2luZyIsImVsbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwiaXRlbSIsIm9uY2hhbmdlIiwidGFyZ2V0IiwidmFsdWUiLCJxdWVyeVNlbGVjdG9yIiwib25jbGljayIsInJlYWR5U3RhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///407\n')}},__webpack_exports__={};__webpack_modules__[407]()})();